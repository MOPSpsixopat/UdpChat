use std::collections::HashSet;
use std::io::{self, BufRead, Write};
use std::net::{IpAddr, Ipv4Addr, SocketAddr, UdpSocket};
use std::str::FromStr;
use std::sync::{Arc, Mutex};
use std::thread;
use std::sync::atomic::{AtomicBool, Ordering};

use if_addrs::{get_if_addrs, IfAddr};
use clap::Parser;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    #[arg(short, long, default_value_t = 12345)]
    port: u16,
}

fn main() -> io::Result<()> {
    let args = Args::parse();
    let port = args.port;

    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let local_ip = get_local_ip()?;
    let (netmask, broadcast) = get_broadcast_info(&local_ip)?;

    println!("=== P2P UDP Chat ===");
    println!("–õ–æ–∫–∞–ª—å–Ω—ã–π IP: {}", local_ip);
    println!("–°–µ—Ç–µ–≤–∞—è –º–∞—Å–∫–∞: {}", netmask);
    println!("Broadcast-–∞–¥—Ä–µ—Å: {}", broadcast);
    println!("–ü–æ—Ä—Ç: {}", port);
    println!("–ö–æ–º–∞–Ω–¥—ã: 'exit' - –≤—ã—Ö–æ–¥, '/peers' - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    println!("–ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...\n");

    // –°–æ–∑–¥–∞–Ω–∏–µ UDP —Å–æ–∫–µ—Ç–∞
    let socket = UdpSocket::bind(format!("0.0.0.0:{}", port))?;
    socket.set_broadcast(true)?;

    let active_peers = Arc::new(Mutex::new(HashSet::new()));
    let should_exit = Arc::new(AtomicBool::new(false));

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let socket_clone = socket.try_clone()?;
    let active_peers_clone = Arc::clone(&active_peers);
    let should_exit_clone = Arc::clone(&should_exit);
    let local_ip_clone = local_ip;

    let receive_handle = thread::spawn(move || {
        receive_messages(socket_clone, active_peers_clone, should_exit_clone, local_ip_clone)
    });

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–≤–æ–¥–∞
    let stdin = io::stdin();
    for line in stdin.lock().lines() {
        let message = line?;
        let trimmed = message.trim();

        if trimmed.is_empty() {
            continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        match trimmed.to_lowercase().as_str() {
            "exit" => {
                println!("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
                should_exit.store(true, Ordering::Relaxed);
                break;
            }
            "/peers" => {
                print_active_peers(&active_peers.lock().unwrap());
                continue;
            }
            _ => {
                // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                let full_msg = format!("{}:{}", local_ip, trimmed);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ broadcast-–∞–¥—Ä–µ—Å
                let broadcast_addr = SocketAddr::new(IpAddr::from(broadcast), port);
                if let Err(e) = socket.send_to(full_msg.as_bytes(), broadcast_addr) {
                    println!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {}", e);
                }
            }
        }
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let _ = receive_handle.join();
    println!("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");

    Ok(())
}

fn receive_messages(
    socket: UdpSocket,
    active_peers: Arc<Mutex<HashSet<IpAddr>>>,
    should_exit: Arc<AtomicBool>,
    local_ip: IpAddr
) {
    let mut buf = [0; 1024];

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è recv_from, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å should_exit
    socket.set_read_timeout(Some(std::time::Duration::from_millis(500))).ok();

    loop {
        if should_exit.load(Ordering::Relaxed) {
            break;
        }

        match socket.recv_from(&mut buf) {
            Ok((len, src_addr)) => {
                let msg = String::from_utf8_lossy(&buf[..len]);
                let src_ip = src_addr.ip();

                // –î–æ–±–∞–≤–ª—è–µ–º IP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if let Ok(parsed_ip) = IpAddr::from_str(&src_ip.to_string()) {
                    let mut peers = active_peers.lock().unwrap();
                    peers.insert(parsed_ip);
                }

                // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: IP:—Å–æ–æ–±—â–µ–Ω–∏–µ)
                let msg_str = msg.trim();
                if let Some(colon_pos) = msg_str.find(':') {
                    let (sender_ip_str, content) = msg_str.split_at(colon_pos);
                    let content = &content[1..]; // —É–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if src_ip != local_ip {
                        println!("üí¨ {}: {}", sender_ip_str, content);
                        print!("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
                        io::stdout().flush().unwrap();
                    }
                } else {
                    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –æ—Ç –¥—Ä—É–≥–∏—Ö)
                    if src_ip != local_ip {
                        println!("[{}]: {}", src_ip, msg_str);
                        print!("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
                        io::stdout().flush().unwrap();
                    }
                }
            }
            Err(ref e) if e.kind() == io::ErrorKind::TimedOut => {
                // –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue;
            }
            Err(_) => {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
    }
}

fn print_active_peers(active_peers: &HashSet<IpAddr>) {
    println!("\n=== –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ({}) ===", active_peers.len());
    for (i, ip) in active_peers.iter().enumerate() {
        println!("   {}. {}", i + 1, ip);
    }
    println!("==================================\n");
}

fn get_local_ip() -> io::Result<IpAddr> {
    for iface in get_if_addrs()? {
        if let IfAddr::V4(addr) = iface.addr {
            if !addr.ip.is_loopback() && addr.ip.is_private() {
                return Ok(IpAddr::V4(addr.ip));
            }
        }
    }
    Ok(IpAddr::V4(Ipv4Addr::LOCALHOST)) // Fallback
}

fn get_broadcast_info(ip: &IpAddr) -> io::Result<(Ipv4Addr, Ipv4Addr)> {
    if let IpAddr::V4(ipv4) = ip {
        for iface in get_if_addrs()? {
            if let IfAddr::V4(addr) = iface.addr {
                if addr.ip == *ipv4 {
                    let mask = Ipv4Addr::new(255, 255, 255, 0); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º /24
                    let broadcast = calculate_broadcast(&addr.ip, mask);
                    return Ok((mask, broadcast));
                }
            }
        }
        Ok((Ipv4Addr::new(255, 255, 255, 0), Ipv4Addr::new(192, 168, 1, 255)))
    } else {
        Ok((Ipv4Addr::new(255, 255, 255, 0), Ipv4Addr::new(192, 168, 1, 255)))
    }
}

fn calculate_broadcast(ip: &Ipv4Addr, netmask: Ipv4Addr) -> Ipv4Addr {
    let ip_bytes = ip.octets();
    let mask_bytes = netmask.octets();
    let broadcast_bytes = [
        ip_bytes[0] | (mask_bytes[0] ^ 255),
        ip_bytes[1] | (mask_bytes[1] ^ 255),
        ip_bytes[2] | (mask_bytes[2] ^ 255),
        ip_bytes[3] | (mask_bytes[3] ^ 255),
    ];
    Ipv4Addr::from(broadcast_bytes)
}